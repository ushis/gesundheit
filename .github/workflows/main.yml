name: "main"

on: "push"

jobs:
  build:
    runs-on: "ubuntu-latest"
    strategy:
      matrix:
        arch: ["386", "amd64", "arm", "arm64"]
    env:
      GOOS: "linux"
      GOARCH: "${{ matrix.arch }}"
      GOARM: "7"
      GOFLAGS: "-trimpath -mod=readonly -modcacherw"
      CGO_ENABLED: "0"
    steps:
      - uses: "actions/checkout@v2"
      - uses: "actions/setup-node@v2"
        with:
          node-version: '16'
          cache: 'yarn'
      - uses: "actions/setup-go@v2"
        with:
          go-version: ">=1.17.7"
      - run: |
          yarn install
          yarn lint
          yarn build
      - run: |
          go build -v -a -o gesundheit .
      - uses: actions/upload-artifact@v2
        with:
          name: gesundheit-${{ matrix.arch }}
          path: gesundheit

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build]
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: gesundheit-386
          path: bin/386
      - uses: actions/download-artifact@v2
        with:
          name: gesundheit-amd64
          path: bin/amd64
      - uses: actions/download-artifact@v2
        with:
          name: gesundheit-arm
          path: bin/arm
      - uses: actions/download-artifact@v2
        with:
          name: gesundheit-arm64
          path: bin/arm64
      - run: |
          for d in bin/*; do
            mv "${d}/gesundheit" "gesundheit-${GITHUB_REF_NAME}-${d##*/}"
          done
      - uses: "softprops/action-gh-release@v1"
        with:
          files: "gesundheit-*"

  arch:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build]
    runs-on: "ubuntu-latest"
    container: archlinux/archlinux:base-devel
    strategy:
      matrix:
        arch: ["x86_64", "armv7h", "aarch64"]
    env:
      CARCH: ${{ matrix.arch }}
    steps:
      - id: goarch
        run: |
          case "${{ matrix.arch }}" in
            "x86_64") echo "::set-output name=GOARCH::amd64";;
            "armv7h") echo "::set-output name=GOARCH::arm";;
            "aarch64") echo "::set-output name=GOARCH::arm64";;
            *) echo "::set-output name=GOARCH::${{ matrix.arch }}";;
          esac
      - run: |
          pacman -Syu --noconfirm
          pacman -S --noconfirm git go
      - run: |
          useradd -m build
          echo -n "${PACKAGE_SIGNING_KEY}" | su build -c "gpg --import"
        env:
          PACKAGE_SIGNING_KEY: ${{ secrets.PACKAGE_SIGNING_KEY }}
      - uses: actions/download-artifact@v2
        with:
          name: gesundheit-${{ steps.goarch.outputs.GOARCH }}
          path: build
      - uses: "actions/checkout@v2"
        with:
          path: src
      - run: |
          chown build:build build
          cp -Lr src/pkg/* build
          cd build
          sed -i "s/pkgver=/pkgver=${GITHUB_REF_NAME}/g" PKGBUILD
          su build -c "makepkg --sign --skipchecksums"
          su build -c "repo-add gesundheit.db.tar.gz gesundheit-*.pkg.tar.zst"
      - run: |
          cd build
          for f in gesundheit-*.pkg.* gesundheit.db* gesundheit.files*; do
            curl -f -X PUT -u "${DAV_CREDENTIALS}" "https://dav.honkgong.info/repo/gesundheit/arch/${{ matrix.arch }}/${f}" -T "${f}"
          done
        env:
          DAV_CREDENTIALS: ${{ secrets.DAV_CREDENTIALS }}

  deb:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: "ubuntu-latest"
    needs: [build]
    strategy:
      matrix:
        arch: ["i386", "amd64", "armhf", "arm64"]
    steps:
      - id: goarch
        run: |
          case "${{ matrix.arch }}" in
            "i386") echo "::set-output name=GOARCH::386";;
            "armhf") echo "::set-output name=GOARCH::arm";;
            *) echo "::set-output name=GOARCH::${{ matrix.arch }}";;
          esac
      - uses: actions/download-artifact@v2
        with:
          name: gesundheit-${{ steps.goarch.outputs.GOARCH }}
          path: bin
      - uses: "actions/checkout@v2"
        with:
          path: src
      - run: |
          sed -i "s#Architecture:#Architecture: ${{ matrix.arch }}#g" src/pkg/deb/control
          sed -i "s#Version:#Version: ${GITHUB_REF_NAME}#g" src/pkg/deb/control
          sudo install -Dm644 src/pkg/deb/conffiles       gesundheit/DEBIAN/conffiles
          sudo install -Dm644 src/pkg/deb/control         gesundheit/DEBIAN/control
          sudo install -Dm755 src/pkg/deb/postinst        gesundheit/DEBIAN/postinst
          sudo install -Dm755 bin/gesundheit              gesundheit/usr/bin/gesundheit
          sudo install -Dm644 src/pkg/gesundheit.service  gesundheit/usr/lib/systemd/system/gesundheit.service
          sudo install -Dm644 src/pkg/gesundheit.sysusers gesundheit/usr/lib/sysusers.d/gesundheit.conf
          sudo install -Dm644 src/pkg/gesundheit.tmpfiles gesundheit/usr/lib/tmpfiles.d/gesundheit.conf
          sudo install -Dm644 src/pkg/gesundheit.toml     gesundheit/etc/gesundheit/gesundheit.toml
          sudo install -dm755                             gesundheit/etc/gesundheit/modules.d
          dpkg-deb --build gesundheit "gesundheit_${GITHUB_REF_NAME}_${{ matrix.arch }}.deb"
      - uses: actions/upload-artifact@v2
        with:
          name: "deb-${{ matrix.arch }}"
          path: "*.deb"

  deb-repo:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [deb]
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: deb-i386
      - uses: actions/download-artifact@v2
        with:
          name: deb-amd64
      - uses: actions/download-artifact@v2
        with:
          name: deb-armhf
      - uses: actions/download-artifact@v2
        with:
          name: deb-arm64
      - run: |
          echo -n "${PACKAGE_SIGNING_KEY}" | gpg --import
        env:
          PACKAGE_SIGNING_KEY: ${{ secrets.PACKAGE_SIGNING_KEY }}
      - run: |
          apt-ftparchive packages . > Packages
          gzip -k -f Packages
          apt-ftparchive release . > Release
          gpg --digest-algo SHA256 --armor --output Release.gpg --detach-sign Release
          gpg --digest-algo SHA256 --clearsign --output InRelease Release
      - run: |
          for f in *.deb Packages* Release* InRelease; do
            curl -f -X PUT -u "${DAV_CREDENTIALS}" "https://dav.honkgong.info/repo/gesundheit/deb/${f}" -T "${f}"
          done
        env:
          DAV_CREDENTIALS: ${{ secrets.DAV_CREDENTIALS }}
